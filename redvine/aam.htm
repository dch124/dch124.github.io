<html>
<head>
<title>Active Appearance Models</title>
<link rel="stylesheet" href="http://www.comp.leeds.ac.uk/vision/simple.css"> 
</head>

<body topmargin="25" leftmargin="25">
<table width=100%>
<tr><td align=center>
<table width=950>
<tr><td>
<center><h1>Active Appearance Models</h1></center>

<h2><a name="Res">Introduction</a></h2>

<p align=justify>An active appearance model (AAM) is a computer vision algorithm for matching a statistical model 
of appearance - a combination of shape and texture - to a new image. The model is built during the training phase during which
the user annotates a set of training images such as faces with landmarks points. The coordinates of the landmarks are used to model the shape in each image. 
The variances in shape and texture present in the training images are modeled using a statistical model, such as Principal Component Analysis (PCA). 
The eigen vectors from PCA capture the pricipal modes of variations in the training images. During the testing phase, the model 
is matched against the test samples in a way that the divergence between the model and each test sample is minimized. This is termed as fitting the 
model to the data. 
 
</p>
<img src="amm.jpg" alt="" align = "right" width=600 height = 500>

<h3><a name="Res">Active Appearance Models using Matlab</a></h3>
<p align=justify>
Active Appearance Models can be understood by using the tool decribed below. This tool can be used to annotate training
images with landmarks, followed by training a Active Appearance Model, fitting the model on test images and finally looking 
at modes of variations in the data. This tool can be operated both using the GUI as illustrated on the left or 
by typing commands on the matlab command line. 
</p>



<h2><a name="Pub">Active Shape Models with Matlab</a></h2>
</font>
<p wrap> 
<ol>
<li> <h4> Video </h4> Obtain a Video /Images: File -> New -></li>
<li> <h4> Annotate </h4> Mark up the images in the video with landmark points. </li>
<ol>
<li> "Add points" to choose landmark points.</li>
<li> "Interpolate" to connect the points as shown on the left </li>
<li> Scaling and rotation can be performed by using the buttons, "up","down", "left" and "right".</li> 
<li> Repeat this the annotation of images through the video sequence. </li>
<li> Mark the frames that are annotated as training by ticking on the "selected" box. </li>
<li> Save the Markup in a *.mat file( markup_filename) using File -> Save or Save As options. </li>
</ol>
<li> <h4> Training : Build Active Apperance Model from Data </h4> 
<ol>
<li> GUI : Load the marked up data using "Load File" button </li>
<li>  Command Mode(represented as >>)  : Set EXAMPLEDIR = '\example'. This is the directory where the files for the project will be stored. </li>
<li> Choose a marked up file (markup_filename) and  >> markup = readdata(markup_filename)</li> 

<li> GUI :  Train the AAM using "Train Model" button</li>
<li>  >>model = estimatemodel(markup).</li> 
<li> The GUI prompts the user to save the file.</li>
<li>   Save the model for example in 'face_model.mat' >> model_filename = [EXAMPLEDIR 'face_model.mat']; </li> 
<li> >> writedata(model, model_filename); </li>
</ol> 

<li> <h4> Testing : Fit Model to Test Images </h4>  </li>
<ol> 
<li> GUI :  "Load Model" and "Fit Model" to Fit the data.</li> 
<li>  Read the markup data >> markup = readdata(markup_filename);</li>
<li>  Initialize markup parameters >> [astart, istart] = markup_params(markup, model);</li>
<li>  Fit the model to the video >> instance = fitvideo(markup.videofile, model, astart, istart);</li>
<li>  Assign an instance file name(e.g. 'face_instance.mat')>> instance_filename = [EXAMPLEDIR 'face_instance.mat'];</li>
<li>  Store the instance in the instance file name>> writedata(instance,instance_filename);</li>
</ol>


<li><h4> Build a video of the modes </h4></li> 
<ol> 
<li> GUI : Show Modes </li>
<li> Load the model >> model = readdata(model_filename);</li>
<li> Assign the corresponding modes_filename >> modes_filename = [EXAMPLEDIR 'face_modes.avi'];</li>
<li> Show the modes video >> modesvideo(model,modes_filename);</li>
</ol> 




<li> <h4> Run Video showing Fit </h4></li>
<ol>
<li> GUI : Show Fit </li> 
<li> Assign a instance video's filename >> instancevideo_filename = [EXAMPLEDIR 'face_fit'];</li>

<li> Run the video showing fit >>  instancevideo(...
   {instance, [], 'template';...
      instance, [-0.66, -0.2; -0.5, -0.1], 'texture'},...
   instancevideo_filename, 'avi', {'video'});</li>

</ol>



</body>

</html>